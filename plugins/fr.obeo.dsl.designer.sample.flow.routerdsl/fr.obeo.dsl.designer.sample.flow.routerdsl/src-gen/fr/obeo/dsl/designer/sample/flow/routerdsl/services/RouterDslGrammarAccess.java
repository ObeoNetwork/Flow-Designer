/*
 * generated by Xtext 2.12.0
 */
package fr.obeo.dsl.designer.sample.flow.routerdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RouterDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RoutingRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.RoutingRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutingRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesCaseRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		
		//RoutingRules:
		//	{RoutingRule}
		//	'#'
		//	rules+=CaseRule*;
		@Override public ParserRule getRule() { return rule; }
		
		//{RoutingRule} '#' rules+=CaseRule*
		public Group getGroup() { return cGroup; }
		
		//{RoutingRule}
		public Action getRoutingRuleAction_0() { return cRoutingRuleAction_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }
		
		//rules+=CaseRule*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//CaseRule
		public RuleCall getRulesCaseRuleParserRuleCall_2_0() { return cRulesCaseRuleParserRuleCall_2_0; }
	}
	public class CaseRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.CaseRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionalParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDecisionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDecisionsDecisionParserRuleCall_3_0 = (RuleCall)cDecisionsAssignment_3.eContents().get(0);
		
		//CaseRule:
		//	'Case' condition=Conditional ':' decisions+=Decision+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Case' condition=Conditional ':' decisions+=Decision+
		public Group getGroup() { return cGroup; }
		
		//'Case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//condition=Conditional
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Conditional
		public RuleCall getConditionConditionalParserRuleCall_1_0() { return cConditionConditionalParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//decisions+=Decision+
		public Assignment getDecisionsAssignment_3() { return cDecisionsAssignment_3; }
		
		//Decision
		public RuleCall getDecisionsDecisionParserRuleCall_3_0() { return cDecisionsDecisionParserRuleCall_3_0; }
	}
	public class DecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.Decision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cRouteToParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMessageDecisionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Decision:
		//	(RouteTo | MessageDecision) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(RouteTo | MessageDecision) ';'
		public Group getGroup() { return cGroup; }
		
		//RouteTo | MessageDecision
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//RouteTo
		public RuleCall getRouteToParserRuleCall_0_0() { return cRouteToParserRuleCall_0_0; }
		
		//MessageDecision
		public RuleCall getMessageDecisionParserRuleCall_0_1() { return cMessageDecisionParserRuleCall_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class MessageDecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.MessageDecision");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDropMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlertParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MessageDecision:
		//	DropMessage | Alert;
		@Override public ParserRule getRule() { return rule; }
		
		//DropMessage | Alert
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DropMessage
		public RuleCall getDropMessageParserRuleCall_0() { return cDropMessageParserRuleCall_0; }
		
		//Alert
		public RuleCall getAlertParserRuleCall_1() { return cAlertParserRuleCall_1; }
	}
	public class RouteToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.RouteTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestinationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestinationProcessorCrossReference_1_0 = (CrossReference)cDestinationAssignment_1.eContents().get(0);
		private final RuleCall cDestinationProcessorIDTerminalRuleCall_1_0_1 = (RuleCall)cDestinationProcessorCrossReference_1_0.eContents().get(1);
		
		//RouteTo:
		//	'->' destination=[flow::Processor];
		@Override public ParserRule getRule() { return rule; }
		
		//'->' destination=[flow::Processor]
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//destination=[flow::Processor]
		public Assignment getDestinationAssignment_1() { return cDestinationAssignment_1; }
		
		//[flow::Processor]
		public CrossReference getDestinationProcessorCrossReference_1_0() { return cDestinationProcessorCrossReference_1_0; }
		
		//ID
		public RuleCall getDestinationProcessorIDTerminalRuleCall_1_0_1() { return cDestinationProcessorIDTerminalRuleCall_1_0_1; }
	}
	public class DropMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.DropMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDropMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DropMessage:
		//	{DropMessage}
		//	'X';
		@Override public ParserRule getRule() { return rule; }
		
		//{DropMessage} 'X'
		public Group getGroup() { return cGroup; }
		
		//{DropMessage}
		public Action getDropMessageAction_0() { return cDropMessageAction_0; }
		
		//'X'
		public Keyword getXKeyword_1() { return cXKeyword_1; }
	}
	public class AlertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.Alert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusExclamationMarkReverseSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelAlertLevelEnumRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		private final Keyword cSolidusExclamationMarkReverseSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Alert:
		//	'/!\\' level=AlertLevel '/!\\';
		@Override public ParserRule getRule() { return rule; }
		
		//'/!\\' level=AlertLevel '/!\\'
		public Group getGroup() { return cGroup; }
		
		//'/!\\'
		public Keyword getSolidusExclamationMarkReverseSolidusKeyword_0() { return cSolidusExclamationMarkReverseSolidusKeyword_0; }
		
		//level=AlertLevel
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }
		
		//AlertLevel
		public RuleCall getLevelAlertLevelEnumRuleCall_1_0() { return cLevelAlertLevelEnumRuleCall_1_0; }
		
		//'/!\\'
		public Keyword getSolidusExclamationMarkReverseSolidusKeyword_2() { return cSolidusExclamationMarkReverseSolidusKeyword_2; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftObjectAccessOrValueParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpComparisonEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightObjectAccessOrValueParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Conditional:
		//	left=ObjectAccessOrValue op=Comparison right=ObjectAccessOrValue;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ObjectAccessOrValue op=Comparison right=ObjectAccessOrValue
		public Group getGroup() { return cGroup; }
		
		//left=ObjectAccessOrValue
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ObjectAccessOrValue
		public RuleCall getLeftObjectAccessOrValueParserRuleCall_0_0() { return cLeftObjectAccessOrValueParserRuleCall_0_0; }
		
		//op=Comparison
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Comparison
		public RuleCall getOpComparisonEnumRuleCall_1_0() { return cOpComparisonEnumRuleCall_1_0; }
		
		//right=ObjectAccessOrValue
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//ObjectAccessOrValue
		public RuleCall getRightObjectAccessOrValueParserRuleCall_2_0() { return cRightObjectAccessOrValueParserRuleCall_2_0; }
	}
	public class ObjectAccessOrValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.ObjectAccessOrValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThroughtputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTemperatureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ObjectAccessOrValue:
		//	ObjectAccess | LiteralValue | Throughtput | Temperature;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectAccess | LiteralValue | Throughtput | Temperature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectAccess
		public RuleCall getObjectAccessParserRuleCall_0() { return cObjectAccessParserRuleCall_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
		
		//Throughtput
		public RuleCall getThroughtputParserRuleCall_2() { return cThroughtputParserRuleCall_2; }
		
		//Temperature
		public RuleCall getTemperatureParserRuleCall_3() { return cTemperatureParserRuleCall_3; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.LiteralValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ThroughtputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.Throughtput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitTimeUnitEnumRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//Throughtput:
		//	value=INT '/' unit=TimeUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT '/' unit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//unit=TimeUnit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_2_0() { return cUnitTimeUnitEnumRuleCall_2_0; }
	}
	public class TemperatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.Temperature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTemperatureUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//Temperature:
		//	value=INT unit=TemperatureUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT unit=TemperatureUnit
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//unit=TemperatureUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//TemperatureUnit
		public RuleCall getUnitTemperatureUnitEnumRuleCall_1_0() { return cUnitTemperatureUnitEnumRuleCall_1_0; }
	}
	public class ObjectAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.ObjectAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessorAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSensorAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSystemAccessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ObjectAccess:
		//	ProcessorAccess | SensorAccess | SystemAccess;
		@Override public ParserRule getRule() { return rule; }
		
		//ProcessorAccess | SensorAccess | SystemAccess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProcessorAccess
		public RuleCall getProcessorAccessParserRuleCall_0() { return cProcessorAccessParserRuleCall_0; }
		
		//SensorAccess
		public RuleCall getSensorAccessParserRuleCall_1() { return cSensorAccessParserRuleCall_1; }
		
		//SystemAccess
		public RuleCall getSystemAccessParserRuleCall_2() { return cSystemAccessParserRuleCall_2; }
	}
	public class ProcessorAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.ProcessorAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProcessorProcessorCrossReference_0_0 = (CrossReference)cProcessorAssignment_0.eContents().get(0);
		private final RuleCall cProcessorProcessorIDTerminalRuleCall_0_0_1 = (RuleCall)cProcessorProcessorCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeProcessorAttributeEnumRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		
		//ProcessorAccess:
		//	processor=[flow::Processor] "." attribute=ProcessorAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//processor=[flow::Processor] "." attribute=ProcessorAttribute
		public Group getGroup() { return cGroup; }
		
		//processor=[flow::Processor]
		public Assignment getProcessorAssignment_0() { return cProcessorAssignment_0; }
		
		//[flow::Processor]
		public CrossReference getProcessorProcessorCrossReference_0_0() { return cProcessorProcessorCrossReference_0_0; }
		
		//ID
		public RuleCall getProcessorProcessorIDTerminalRuleCall_0_0_1() { return cProcessorProcessorIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=ProcessorAttribute
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//ProcessorAttribute
		public RuleCall getAttributeProcessorAttributeEnumRuleCall_2_0() { return cAttributeProcessorAttributeEnumRuleCall_2_0; }
	}
	public class SensorAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.SensorAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorDataSourceCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorDataSourceIDTerminalRuleCall_0_0_1 = (RuleCall)cSensorDataSourceCrossReference_0_0.eContents().get(1);
		private final Keyword cVolumeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SensorAccess:
		//	sensor=[flow::DataSource] ".volume";
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[flow::DataSource] ".volume"
		public Group getGroup() { return cGroup; }
		
		//sensor=[flow::DataSource]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[flow::DataSource]
		public CrossReference getSensorDataSourceCrossReference_0_0() { return cSensorDataSourceCrossReference_0_0; }
		
		//ID
		public RuleCall getSensorDataSourceIDTerminalRuleCall_0_0_1() { return cSensorDataSourceIDTerminalRuleCall_0_0_1; }
		
		//".volume"
		public Keyword getVolumeKeyword_1() { return cVolumeKeyword_1; }
	}
	public class SystemAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.SystemAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSystemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSystemSystemCrossReference_0_0 = (CrossReference)cSystemAssignment_0.eContents().get(0);
		private final RuleCall cSystemSystemIDTerminalRuleCall_0_0_1 = (RuleCall)cSystemSystemCrossReference_0_0.eContents().get(1);
		private final Keyword cTemperatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SystemAccess:
		//	system=[flow::System] ".temperature";
		@Override public ParserRule getRule() { return rule; }
		
		//system=[flow::System] ".temperature"
		public Group getGroup() { return cGroup; }
		
		//system=[flow::System]
		public Assignment getSystemAssignment_0() { return cSystemAssignment_0; }
		
		//[flow::System]
		public CrossReference getSystemSystemCrossReference_0_0() { return cSystemSystemCrossReference_0_0; }
		
		//ID
		public RuleCall getSystemSystemIDTerminalRuleCall_0_0_1() { return cSystemSystemIDTerminalRuleCall_0_0_1; }
		
		//".temperature"
		public Keyword getTemperatureKeyword_1() { return cTemperatureKeyword_1; }
	}
	
	public class SensorAttributeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.SensorAttribute");
		private final EnumLiteralDeclaration cVolumeEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cVolumeVolumeKeyword_0 = (Keyword)cVolumeEnumLiteralDeclaration.eContents().get(0);
		
		//enum SensorAttribute:
		//	volume;
		public EnumRule getRule() { return rule; }
		
		//volume
		public EnumLiteralDeclaration getVolumeEnumLiteralDeclaration() { return cVolumeEnumLiteralDeclaration; }
		
		//"volume"
		public Keyword getVolumeVolumeKeyword_0() { return cVolumeVolumeKeyword_0; }
	}
	public class ProcessorAttributeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.ProcessorAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCapacityEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCapacityCapacityKeyword_0_0 = (Keyword)cCapacityEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLoadEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLoadLoadKeyword_1_0 = (Keyword)cLoadEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cConsumptionEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cConsumptionConsumptionKeyword_2_0 = (Keyword)cConsumptionEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ProcessorAttribute:
		//	capacity | load | consumption;
		public EnumRule getRule() { return rule; }
		
		//capacity | load | consumption
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//capacity
		public EnumLiteralDeclaration getCapacityEnumLiteralDeclaration_0() { return cCapacityEnumLiteralDeclaration_0; }
		
		//"capacity"
		public Keyword getCapacityCapacityKeyword_0_0() { return cCapacityCapacityKeyword_0_0; }
		
		//load
		public EnumLiteralDeclaration getLoadEnumLiteralDeclaration_1() { return cLoadEnumLiteralDeclaration_1; }
		
		//"load"
		public Keyword getLoadLoadKeyword_1_0() { return cLoadLoadKeyword_1_0; }
		
		//consumption
		public EnumLiteralDeclaration getConsumptionEnumLiteralDeclaration_2() { return cConsumptionEnumLiteralDeclaration_2; }
		
		//"consumption"
		public Keyword getConsumptionConsumptionKeyword_2_0() { return cConsumptionConsumptionKeyword_2_0; }
	}
	public class ComparisonElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.Comparison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLOWEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLOWERLessThanSignKeyword_0_0 = (Keyword)cLOWEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWER_EQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWER_EQLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLOWER_EQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQEqualsSignKeyword_2_0 = (Keyword)cEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cHIGHEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cHIGHERGreaterThanSignKeyword_3_0 = (Keyword)cHIGHEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cHIGHER_EQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cHIGHER_EQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cHIGHER_EQEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Comparison:
		//	LOWER='<' | LOWER_EQ='<=' | EQ='=' | HIGHER='>' | HIGHER_EQ='>=';
		public EnumRule getRule() { return rule; }
		
		//LOWER='<' | LOWER_EQ='<=' | EQ='=' | HIGHER='>' | HIGHER_EQ='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOWER='<'
		public EnumLiteralDeclaration getLOWEREnumLiteralDeclaration_0() { return cLOWEREnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLOWERLessThanSignKeyword_0_0() { return cLOWERLessThanSignKeyword_0_0; }
		
		//LOWER_EQ='<='
		public EnumLiteralDeclaration getLOWER_EQEnumLiteralDeclaration_1() { return cLOWER_EQEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getLOWER_EQLessThanSignEqualsSignKeyword_1_0() { return cLOWER_EQLessThanSignEqualsSignKeyword_1_0; }
		
		//EQ='='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_2() { return cEQEnumLiteralDeclaration_2; }
		
		//'='
		public Keyword getEQEqualsSignKeyword_2_0() { return cEQEqualsSignKeyword_2_0; }
		
		//HIGHER='>'
		public EnumLiteralDeclaration getHIGHEREnumLiteralDeclaration_3() { return cHIGHEREnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getHIGHERGreaterThanSignKeyword_3_0() { return cHIGHERGreaterThanSignKeyword_3_0; }
		
		//HIGHER_EQ='>='
		public EnumLiteralDeclaration getHIGHER_EQEnumLiteralDeclaration_4() { return cHIGHER_EQEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getHIGHER_EQGreaterThanSignEqualsSignKeyword_4_0() { return cHIGHER_EQGreaterThanSignEqualsSignKeyword_4_0; }
	}
	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecondsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecondsSecKeyword_0_0 = (Keyword)cSecondsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMillisecondsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMillisecondsMsecKeyword_1_0 = (Keyword)cMillisecondsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMicrosecondsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMicrosecondsUsecKeyword_2_0 = (Keyword)cMicrosecondsEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TimeUnit:
		//	seconds='sec' | milliseconds='msec' | microseconds='usec';
		public EnumRule getRule() { return rule; }
		
		//seconds='sec' | milliseconds='msec' | microseconds='usec'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//seconds='sec'
		public EnumLiteralDeclaration getSecondsEnumLiteralDeclaration_0() { return cSecondsEnumLiteralDeclaration_0; }
		
		//'sec'
		public Keyword getSecondsSecKeyword_0_0() { return cSecondsSecKeyword_0_0; }
		
		//milliseconds='msec'
		public EnumLiteralDeclaration getMillisecondsEnumLiteralDeclaration_1() { return cMillisecondsEnumLiteralDeclaration_1; }
		
		//'msec'
		public Keyword getMillisecondsMsecKeyword_1_0() { return cMillisecondsMsecKeyword_1_0; }
		
		//microseconds='usec'
		public EnumLiteralDeclaration getMicrosecondsEnumLiteralDeclaration_2() { return cMicrosecondsEnumLiteralDeclaration_2; }
		
		//'usec'
		public Keyword getMicrosecondsUsecKeyword_2_0() { return cMicrosecondsUsecKeyword_2_0; }
	}
	public class TemperatureUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.TemperatureUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCelsiusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCelsiusCKeyword_0_0 = (Keyword)cCelsiusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFahrenheitEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFahrenheitFKeyword_1_0 = (Keyword)cFahrenheitEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TemperatureUnit:
		//	celsius='°C' | fahrenheit='°F';
		public EnumRule getRule() { return rule; }
		
		//celsius='°C' | fahrenheit='°F'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//celsius='°C'
		public EnumLiteralDeclaration getCelsiusEnumLiteralDeclaration_0() { return cCelsiusEnumLiteralDeclaration_0; }
		
		//'°C'
		public Keyword getCelsiusCKeyword_0_0() { return cCelsiusCKeyword_0_0; }
		
		//fahrenheit='°F'
		public EnumLiteralDeclaration getFahrenheitEnumLiteralDeclaration_1() { return cFahrenheitEnumLiteralDeclaration_1; }
		
		//'°F'
		public Keyword getFahrenheitFKeyword_1_0() { return cFahrenheitFKeyword_1_0; }
	}
	public class AlertLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl.AlertLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCriticalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCriticalCriticalKeyword_0_0 = (Keyword)cCriticalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMajorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMajorMajorKeyword_1_0 = (Keyword)cMajorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cErrorErrorKeyword_2_0 = (Keyword)cErrorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWarningWarningKeyword_3_0 = (Keyword)cWarningEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AlertLevel:
		//	critical | major | error | warning;
		public EnumRule getRule() { return rule; }
		
		//critical | major | error | warning
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//critical
		public EnumLiteralDeclaration getCriticalEnumLiteralDeclaration_0() { return cCriticalEnumLiteralDeclaration_0; }
		
		//"critical"
		public Keyword getCriticalCriticalKeyword_0_0() { return cCriticalCriticalKeyword_0_0; }
		
		//major
		public EnumLiteralDeclaration getMajorEnumLiteralDeclaration_1() { return cMajorEnumLiteralDeclaration_1; }
		
		//"major"
		public Keyword getMajorMajorKeyword_1_0() { return cMajorMajorKeyword_1_0; }
		
		//error
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_2() { return cErrorEnumLiteralDeclaration_2; }
		
		//"error"
		public Keyword getErrorErrorKeyword_2_0() { return cErrorErrorKeyword_2_0; }
		
		//warning
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_3() { return cWarningEnumLiteralDeclaration_3; }
		
		//"warning"
		public Keyword getWarningWarningKeyword_3_0() { return cWarningWarningKeyword_3_0; }
	}
	
	private final RoutingRulesElements pRoutingRules;
	private final CaseRuleElements pCaseRule;
	private final DecisionElements pDecision;
	private final MessageDecisionElements pMessageDecision;
	private final RouteToElements pRouteTo;
	private final DropMessageElements pDropMessage;
	private final AlertElements pAlert;
	private final ConditionalElements pConditional;
	private final ObjectAccessOrValueElements pObjectAccessOrValue;
	private final LiteralValueElements pLiteralValue;
	private final ThroughtputElements pThroughtput;
	private final TemperatureElements pTemperature;
	private final ObjectAccessElements pObjectAccess;
	private final ProcessorAccessElements pProcessorAccess;
	private final SensorAccessElements pSensorAccess;
	private final SystemAccessElements pSystemAccess;
	private final SensorAttributeElements eSensorAttribute;
	private final ProcessorAttributeElements eProcessorAttribute;
	private final ComparisonElements eComparison;
	private final TimeUnitElements eTimeUnit;
	private final TemperatureUnitElements eTemperatureUnit;
	private final AlertLevelElements eAlertLevel;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RouterDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoutingRules = new RoutingRulesElements();
		this.pCaseRule = new CaseRuleElements();
		this.pDecision = new DecisionElements();
		this.pMessageDecision = new MessageDecisionElements();
		this.pRouteTo = new RouteToElements();
		this.pDropMessage = new DropMessageElements();
		this.pAlert = new AlertElements();
		this.pConditional = new ConditionalElements();
		this.pObjectAccessOrValue = new ObjectAccessOrValueElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pThroughtput = new ThroughtputElements();
		this.pTemperature = new TemperatureElements();
		this.pObjectAccess = new ObjectAccessElements();
		this.pProcessorAccess = new ProcessorAccessElements();
		this.pSensorAccess = new SensorAccessElements();
		this.pSystemAccess = new SystemAccessElements();
		this.eSensorAttribute = new SensorAttributeElements();
		this.eProcessorAttribute = new ProcessorAttributeElements();
		this.eComparison = new ComparisonElements();
		this.eTimeUnit = new TimeUnitElements();
		this.eTemperatureUnit = new TemperatureUnitElements();
		this.eAlertLevel = new AlertLevelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.obeo.dsl.designer.sample.flow.routerdsl.RouterDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RoutingRules:
	//	{RoutingRule}
	//	'#'
	//	rules+=CaseRule*;
	public RoutingRulesElements getRoutingRulesAccess() {
		return pRoutingRules;
	}
	
	public ParserRule getRoutingRulesRule() {
		return getRoutingRulesAccess().getRule();
	}
	
	//CaseRule:
	//	'Case' condition=Conditional ':' decisions+=Decision+;
	public CaseRuleElements getCaseRuleAccess() {
		return pCaseRule;
	}
	
	public ParserRule getCaseRuleRule() {
		return getCaseRuleAccess().getRule();
	}
	
	//Decision:
	//	(RouteTo | MessageDecision) ';';
	public DecisionElements getDecisionAccess() {
		return pDecision;
	}
	
	public ParserRule getDecisionRule() {
		return getDecisionAccess().getRule();
	}
	
	//MessageDecision:
	//	DropMessage | Alert;
	public MessageDecisionElements getMessageDecisionAccess() {
		return pMessageDecision;
	}
	
	public ParserRule getMessageDecisionRule() {
		return getMessageDecisionAccess().getRule();
	}
	
	//RouteTo:
	//	'->' destination=[flow::Processor];
	public RouteToElements getRouteToAccess() {
		return pRouteTo;
	}
	
	public ParserRule getRouteToRule() {
		return getRouteToAccess().getRule();
	}
	
	//DropMessage:
	//	{DropMessage}
	//	'X';
	public DropMessageElements getDropMessageAccess() {
		return pDropMessage;
	}
	
	public ParserRule getDropMessageRule() {
		return getDropMessageAccess().getRule();
	}
	
	//Alert:
	//	'/!\\' level=AlertLevel '/!\\';
	public AlertElements getAlertAccess() {
		return pAlert;
	}
	
	public ParserRule getAlertRule() {
		return getAlertAccess().getRule();
	}
	
	//Conditional:
	//	left=ObjectAccessOrValue op=Comparison right=ObjectAccessOrValue;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//ObjectAccessOrValue:
	//	ObjectAccess | LiteralValue | Throughtput | Temperature;
	public ObjectAccessOrValueElements getObjectAccessOrValueAccess() {
		return pObjectAccessOrValue;
	}
	
	public ParserRule getObjectAccessOrValueRule() {
		return getObjectAccessOrValueAccess().getRule();
	}
	
	//LiteralValue:
	//	value=INT;
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//Throughtput:
	//	value=INT '/' unit=TimeUnit;
	public ThroughtputElements getThroughtputAccess() {
		return pThroughtput;
	}
	
	public ParserRule getThroughtputRule() {
		return getThroughtputAccess().getRule();
	}
	
	//Temperature:
	//	value=INT unit=TemperatureUnit;
	public TemperatureElements getTemperatureAccess() {
		return pTemperature;
	}
	
	public ParserRule getTemperatureRule() {
		return getTemperatureAccess().getRule();
	}
	
	//ObjectAccess:
	//	ProcessorAccess | SensorAccess | SystemAccess;
	public ObjectAccessElements getObjectAccessAccess() {
		return pObjectAccess;
	}
	
	public ParserRule getObjectAccessRule() {
		return getObjectAccessAccess().getRule();
	}
	
	//ProcessorAccess:
	//	processor=[flow::Processor] "." attribute=ProcessorAttribute;
	public ProcessorAccessElements getProcessorAccessAccess() {
		return pProcessorAccess;
	}
	
	public ParserRule getProcessorAccessRule() {
		return getProcessorAccessAccess().getRule();
	}
	
	//SensorAccess:
	//	sensor=[flow::DataSource] ".volume";
	public SensorAccessElements getSensorAccessAccess() {
		return pSensorAccess;
	}
	
	public ParserRule getSensorAccessRule() {
		return getSensorAccessAccess().getRule();
	}
	
	//SystemAccess:
	//	system=[flow::System] ".temperature";
	public SystemAccessElements getSystemAccessAccess() {
		return pSystemAccess;
	}
	
	public ParserRule getSystemAccessRule() {
		return getSystemAccessAccess().getRule();
	}
	
	//enum SensorAttribute:
	//	volume;
	public SensorAttributeElements getSensorAttributeAccess() {
		return eSensorAttribute;
	}
	
	public EnumRule getSensorAttributeRule() {
		return getSensorAttributeAccess().getRule();
	}
	
	//enum ProcessorAttribute:
	//	capacity | load | consumption;
	public ProcessorAttributeElements getProcessorAttributeAccess() {
		return eProcessorAttribute;
	}
	
	public EnumRule getProcessorAttributeRule() {
		return getProcessorAttributeAccess().getRule();
	}
	
	//enum Comparison:
	//	LOWER='<' | LOWER_EQ='<=' | EQ='=' | HIGHER='>' | HIGHER_EQ='>=';
	public ComparisonElements getComparisonAccess() {
		return eComparison;
	}
	
	public EnumRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//enum TimeUnit:
	//	seconds='sec' | milliseconds='msec' | microseconds='usec';
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//enum TemperatureUnit:
	//	celsius='°C' | fahrenheit='°F';
	public TemperatureUnitElements getTemperatureUnitAccess() {
		return eTemperatureUnit;
	}
	
	public EnumRule getTemperatureUnitRule() {
		return getTemperatureUnitAccess().getRule();
	}
	
	//enum AlertLevel:
	//	critical | major | error | warning;
	public AlertLevelElements getAlertLevelAccess() {
		return eAlertLevel;
	}
	
	public EnumRule getAlertLevelRule() {
		return getAlertLevelAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

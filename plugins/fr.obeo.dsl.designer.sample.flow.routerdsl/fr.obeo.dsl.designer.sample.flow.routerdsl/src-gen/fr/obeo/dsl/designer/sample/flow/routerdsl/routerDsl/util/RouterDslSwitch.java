/**
 * generated by Xtext 2.12.0
 */
package fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.util;

import fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.RouterDslPackage
 * @generated
 */
public class RouterDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RouterDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RouterDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = RouterDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case RouterDslPackage.ROUTING_RULES:
      {
        RoutingRules routingRules = (RoutingRules)theEObject;
        T result = caseRoutingRules(routingRules);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.CASE_RULE:
      {
        CaseRule caseRule = (CaseRule)theEObject;
        T result = caseCaseRule(caseRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.DECISION:
      {
        Decision decision = (Decision)theEObject;
        T result = caseDecision(decision);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.MESSAGE_DECISION:
      {
        MessageDecision messageDecision = (MessageDecision)theEObject;
        T result = caseMessageDecision(messageDecision);
        if (result == null) result = caseDecision(messageDecision);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.ROUTE_TO:
      {
        RouteTo routeTo = (RouteTo)theEObject;
        T result = caseRouteTo(routeTo);
        if (result == null) result = caseDecision(routeTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.DROP_MESSAGE:
      {
        DropMessage dropMessage = (DropMessage)theEObject;
        T result = caseDropMessage(dropMessage);
        if (result == null) result = caseMessageDecision(dropMessage);
        if (result == null) result = caseDecision(dropMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.ALERT:
      {
        Alert alert = (Alert)theEObject;
        T result = caseAlert(alert);
        if (result == null) result = caseMessageDecision(alert);
        if (result == null) result = caseDecision(alert);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.CONDITIONAL:
      {
        Conditional conditional = (Conditional)theEObject;
        T result = caseConditional(conditional);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.OBJECT_ACCESS_OR_VALUE:
      {
        ObjectAccessOrValue objectAccessOrValue = (ObjectAccessOrValue)theEObject;
        T result = caseObjectAccessOrValue(objectAccessOrValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.LITERAL_VALUE:
      {
        LiteralValue literalValue = (LiteralValue)theEObject;
        T result = caseLiteralValue(literalValue);
        if (result == null) result = caseObjectAccessOrValue(literalValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.THROUGHTPUT:
      {
        Throughtput throughtput = (Throughtput)theEObject;
        T result = caseThroughtput(throughtput);
        if (result == null) result = caseObjectAccessOrValue(throughtput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.TEMPERATURE:
      {
        Temperature temperature = (Temperature)theEObject;
        T result = caseTemperature(temperature);
        if (result == null) result = caseObjectAccessOrValue(temperature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.OBJECT_ACCESS:
      {
        ObjectAccess objectAccess = (ObjectAccess)theEObject;
        T result = caseObjectAccess(objectAccess);
        if (result == null) result = caseObjectAccessOrValue(objectAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.PROCESSOR_ACCESS:
      {
        ProcessorAccess processorAccess = (ProcessorAccess)theEObject;
        T result = caseProcessorAccess(processorAccess);
        if (result == null) result = caseObjectAccess(processorAccess);
        if (result == null) result = caseObjectAccessOrValue(processorAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.SENSOR_ACCESS:
      {
        SensorAccess sensorAccess = (SensorAccess)theEObject;
        T result = caseSensorAccess(sensorAccess);
        if (result == null) result = caseObjectAccess(sensorAccess);
        if (result == null) result = caseObjectAccessOrValue(sensorAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.SYSTEM_ACCESS:
      {
        SystemAccess systemAccess = (SystemAccess)theEObject;
        T result = caseSystemAccess(systemAccess);
        if (result == null) result = caseObjectAccess(systemAccess);
        if (result == null) result = caseObjectAccessOrValue(systemAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RouterDslPackage.ROUTING_RULE:
      {
        RoutingRule routingRule = (RoutingRule)theEObject;
        T result = caseRoutingRule(routingRule);
        if (result == null) result = caseRoutingRules(routingRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Routing Rules</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Routing Rules</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoutingRules(RoutingRules object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseRule(CaseRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Decision</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Decision</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDecision(Decision object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Decision</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Decision</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageDecision(MessageDecision object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Route To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Route To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRouteTo(RouteTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Drop Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Drop Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDropMessage(DropMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alert</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alert</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlert(Alert object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditional(Conditional object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object Access Or Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object Access Or Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjectAccessOrValue(ObjectAccessOrValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralValue(LiteralValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Throughtput</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Throughtput</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThroughtput(Throughtput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Temperature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Temperature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemperature(Temperature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjectAccess(ObjectAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Processor Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Processor Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessorAccess(ProcessorAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sensor Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sensor Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSensorAccess(SensorAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>System Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>System Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSystemAccess(SystemAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Routing Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Routing Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoutingRule(RoutingRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //RouterDslSwitch

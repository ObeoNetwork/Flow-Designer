/**
 * generated by Xtext 2.12.0
 */
package fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.util;

import fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.RouterDslPackage
 * @generated
 */
public class RouterDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RouterDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RouterDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RouterDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RouterDslSwitch<Adapter> modelSwitch =
    new RouterDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseRoutingRules(RoutingRules object)
      {
        return createRoutingRulesAdapter();
      }
      @Override
      public Adapter caseCaseRule(CaseRule object)
      {
        return createCaseRuleAdapter();
      }
      @Override
      public Adapter caseDecision(Decision object)
      {
        return createDecisionAdapter();
      }
      @Override
      public Adapter caseMessageDecision(MessageDecision object)
      {
        return createMessageDecisionAdapter();
      }
      @Override
      public Adapter caseRouteTo(RouteTo object)
      {
        return createRouteToAdapter();
      }
      @Override
      public Adapter caseDropMessage(DropMessage object)
      {
        return createDropMessageAdapter();
      }
      @Override
      public Adapter caseAlert(Alert object)
      {
        return createAlertAdapter();
      }
      @Override
      public Adapter caseConditional(Conditional object)
      {
        return createConditionalAdapter();
      }
      @Override
      public Adapter caseObjectAccessOrValue(ObjectAccessOrValue object)
      {
        return createObjectAccessOrValueAdapter();
      }
      @Override
      public Adapter caseLiteralValue(LiteralValue object)
      {
        return createLiteralValueAdapter();
      }
      @Override
      public Adapter caseThroughtput(Throughtput object)
      {
        return createThroughtputAdapter();
      }
      @Override
      public Adapter caseTemperature(Temperature object)
      {
        return createTemperatureAdapter();
      }
      @Override
      public Adapter caseObjectAccess(ObjectAccess object)
      {
        return createObjectAccessAdapter();
      }
      @Override
      public Adapter caseProcessorAccess(ProcessorAccess object)
      {
        return createProcessorAccessAdapter();
      }
      @Override
      public Adapter caseSensorAccess(SensorAccess object)
      {
        return createSensorAccessAdapter();
      }
      @Override
      public Adapter caseSystemAccess(SystemAccess object)
      {
        return createSystemAccessAdapter();
      }
      @Override
      public Adapter caseRoutingRule(RoutingRule object)
      {
        return createRoutingRuleAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.RoutingRules <em>Routing Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.RoutingRules
   * @generated
   */
  public Adapter createRoutingRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.CaseRule <em>Case Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.CaseRule
   * @generated
   */
  public Adapter createCaseRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Decision <em>Decision</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Decision
   * @generated
   */
  public Adapter createDecisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.MessageDecision <em>Message Decision</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.MessageDecision
   * @generated
   */
  public Adapter createMessageDecisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.RouteTo <em>Route To</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.RouteTo
   * @generated
   */
  public Adapter createRouteToAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.DropMessage <em>Drop Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.DropMessage
   * @generated
   */
  public Adapter createDropMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Alert <em>Alert</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Alert
   * @generated
   */
  public Adapter createAlertAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Conditional <em>Conditional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Conditional
   * @generated
   */
  public Adapter createConditionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.ObjectAccessOrValue <em>Object Access Or Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.ObjectAccessOrValue
   * @generated
   */
  public Adapter createObjectAccessOrValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.LiteralValue <em>Literal Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.LiteralValue
   * @generated
   */
  public Adapter createLiteralValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Throughtput <em>Throughtput</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Throughtput
   * @generated
   */
  public Adapter createThroughtputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Temperature <em>Temperature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.Temperature
   * @generated
   */
  public Adapter createTemperatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.ObjectAccess <em>Object Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.ObjectAccess
   * @generated
   */
  public Adapter createObjectAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.ProcessorAccess <em>Processor Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.ProcessorAccess
   * @generated
   */
  public Adapter createProcessorAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.SensorAccess <em>Sensor Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.SensorAccess
   * @generated
   */
  public Adapter createSensorAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.SystemAccess <em>System Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.SystemAccess
   * @generated
   */
  public Adapter createSystemAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.RoutingRule <em>Routing Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.obeo.dsl.designer.sample.flow.routerdsl.routerDsl.RoutingRule
   * @generated
   */
  public Adapter createRoutingRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RouterDslAdapterFactory

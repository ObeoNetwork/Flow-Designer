/*
 * generated by Xtext 2.12.0
 */
package fr.obeo.dsl.designer.sample.flow.routerdsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.obeo.dsl.designer.sample.flow.routerdsl.ide.contentassist.antlr.internal.InternalRouterDslParser;
import fr.obeo.dsl.designer.sample.flow.routerdsl.services.RouterDslGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RouterDslParser extends AbstractContentAssistParser {

	@Inject
	private RouterDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRouterDslParser createParser() {
		InternalRouterDslParser result = new InternalRouterDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDecisionAccess().getAlternatives_0(), "rule__Decision__Alternatives_0");
					put(grammarAccess.getMessageDecisionAccess().getAlternatives(), "rule__MessageDecision__Alternatives");
					put(grammarAccess.getObjectAccessOrValueAccess().getAlternatives(), "rule__ObjectAccessOrValue__Alternatives");
					put(grammarAccess.getObjectAccessAccess().getAlternatives(), "rule__ObjectAccess__Alternatives");
					put(grammarAccess.getProcessorAttributeAccess().getAlternatives(), "rule__ProcessorAttribute__Alternatives");
					put(grammarAccess.getComparisonAccess().getAlternatives(), "rule__Comparison__Alternatives");
					put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
					put(grammarAccess.getTemperatureUnitAccess().getAlternatives(), "rule__TemperatureUnit__Alternatives");
					put(grammarAccess.getAlertLevelAccess().getAlternatives(), "rule__AlertLevel__Alternatives");
					put(grammarAccess.getRoutingRulesAccess().getGroup(), "rule__RoutingRules__Group__0");
					put(grammarAccess.getCaseRuleAccess().getGroup(), "rule__CaseRule__Group__0");
					put(grammarAccess.getDecisionAccess().getGroup(), "rule__Decision__Group__0");
					put(grammarAccess.getRouteToAccess().getGroup(), "rule__RouteTo__Group__0");
					put(grammarAccess.getDropMessageAccess().getGroup(), "rule__DropMessage__Group__0");
					put(grammarAccess.getAlertAccess().getGroup(), "rule__Alert__Group__0");
					put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
					put(grammarAccess.getThroughtputAccess().getGroup(), "rule__Throughtput__Group__0");
					put(grammarAccess.getTemperatureAccess().getGroup(), "rule__Temperature__Group__0");
					put(grammarAccess.getProcessorAccessAccess().getGroup(), "rule__ProcessorAccess__Group__0");
					put(grammarAccess.getSensorAccessAccess().getGroup(), "rule__SensorAccess__Group__0");
					put(grammarAccess.getSystemAccessAccess().getGroup(), "rule__SystemAccess__Group__0");
					put(grammarAccess.getRoutingRulesAccess().getRulesAssignment_2(), "rule__RoutingRules__RulesAssignment_2");
					put(grammarAccess.getCaseRuleAccess().getConditionAssignment_1(), "rule__CaseRule__ConditionAssignment_1");
					put(grammarAccess.getCaseRuleAccess().getDecisionsAssignment_3(), "rule__CaseRule__DecisionsAssignment_3");
					put(grammarAccess.getRouteToAccess().getDestinationAssignment_1(), "rule__RouteTo__DestinationAssignment_1");
					put(grammarAccess.getAlertAccess().getLevelAssignment_1(), "rule__Alert__LevelAssignment_1");
					put(grammarAccess.getConditionalAccess().getLeftAssignment_0(), "rule__Conditional__LeftAssignment_0");
					put(grammarAccess.getConditionalAccess().getOpAssignment_1(), "rule__Conditional__OpAssignment_1");
					put(grammarAccess.getConditionalAccess().getRightAssignment_2(), "rule__Conditional__RightAssignment_2");
					put(grammarAccess.getLiteralValueAccess().getValueAssignment(), "rule__LiteralValue__ValueAssignment");
					put(grammarAccess.getThroughtputAccess().getValueAssignment_0(), "rule__Throughtput__ValueAssignment_0");
					put(grammarAccess.getThroughtputAccess().getUnitAssignment_2(), "rule__Throughtput__UnitAssignment_2");
					put(grammarAccess.getTemperatureAccess().getValueAssignment_0(), "rule__Temperature__ValueAssignment_0");
					put(grammarAccess.getTemperatureAccess().getUnitAssignment_1(), "rule__Temperature__UnitAssignment_1");
					put(grammarAccess.getProcessorAccessAccess().getProcessorAssignment_0(), "rule__ProcessorAccess__ProcessorAssignment_0");
					put(grammarAccess.getProcessorAccessAccess().getAttributeAssignment_2(), "rule__ProcessorAccess__AttributeAssignment_2");
					put(grammarAccess.getSensorAccessAccess().getSensorAssignment_0(), "rule__SensorAccess__SensorAssignment_0");
					put(grammarAccess.getSystemAccessAccess().getSystemAssignment_0(), "rule__SystemAccess__SystemAssignment_0");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RouterDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RouterDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
